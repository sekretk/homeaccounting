name: CI

# Comprehensive CI pipeline with E2E testing
# - Runs linting, unit tests, and builds
# - Sets up PostgreSQL test database
# - Uses proper migration system (scripts/migrate.ts) for database setup
# - Runs database migrations and seeds using npm scripts
# - Starts backend and frontend services
# - Runs Playwright E2E tests against the running application
# - Uploads test results and reports as artifacts

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

jobs:
  pr-checks:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm i

      - name: Setup Nx SHAs
        uses: nrwl/nx-set-shas@v4

      - name: Cache Nx
        uses: actions/cache@v4
        with:
          path: |
            ~/.nx
            .nx/cache
          key: ${{ runner.os }}-nx-${{ hashFiles('**/package-lock.json') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-nx-${{ hashFiles('**/package-lock.json') }}-

      - name: Format code
        run: npx nx format:write

      - name: Check formatting
        run: npx nx format:check

      - name: Lint affected
        run: npx nx affected -t lint --parallel=3

      - name: Test affected
        run: npx nx affected -t test --parallel=3 --coverage

      - name: Build affected
        run: npx nx affected -t build --parallel=3

      # Set up PostgreSQL for E2E tests
      - name: Start PostgreSQL
        run: |
          sudo systemctl start postgresql.service
          # Create user with password (ignore if exists)
          sudo -u postgres psql -c "CREATE USER runner WITH SUPERUSER PASSWORD 'testpass123';" || echo "User runner already exists"
          sudo -u postgres createdb homeaccounting_test || echo "Database already exists"
          sudo -u postgres psql -d homeaccounting_test -c "
            CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";
          "
          # Grant all privileges to runner user
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE homeaccounting_test TO runner;"

      # Set up test environment variables
      - name: Set up test environment
        run: |
          # Set up environment variables for both migration and backend formats
          echo "DB_HOST=localhost" >> $GITHUB_ENV
          echo "DB_PORT=5432" >> $GITHUB_ENV
          echo "DB_NAME=homeaccounting_test" >> $GITHUB_ENV
          echo "DB_USERNAME=runner" >> $GITHUB_ENV
          echo "DB_PASSWORD=testpass123" >> $GITHUB_ENV
          echo "DATABASE_HOST=localhost" >> $GITHUB_ENV
          echo "DATABASE_PORT=5432" >> $GITHUB_ENV
          echo "DATABASE_NAME=homeaccounting_test" >> $GITHUB_ENV
          echo "DATABASE_USER=runner" >> $GITHUB_ENV
          echo "DATABASE_PASSWORD=testpass123" >> $GITHUB_ENV
          echo "NODE_ENV=test" >> $GITHUB_ENV
          echo "‚úÖ Environment variables configured for both migration and backend services"

      # Build shared package (required for migrations)
      - name: Build shared package for migrations
        run: npx nx build shared

      # Show migration system capabilities
      - name: Migration system info
        run: |
          echo "üìã Available migration commands:"
          npm run migrate help
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: homeaccounting_test
          DB_USERNAME: runner
          DB_PASSWORD: "testpass123"

      # Test database connection before migrations
      - name: Test database connection
        run: |
          echo "üîç Testing database connection..."
          PGPASSWORD="testpass123" psql -h localhost -U runner -d homeaccounting_test -c "SELECT version();" || exit 1
          echo "‚úÖ Database connection successful"

      # Run database migrations using proper migration script
      - name: Run database migrations
        run: |
          echo "üîÑ Running database migrations..."
          echo "üîß Environment check:"
          echo "  DB_HOST: $DB_HOST"
          echo "  DB_NAME: $DB_NAME" 
          echo "  DB_USERNAME: $DB_USERNAME"
          echo "üìä Checking shared package build..."
          ls -la dist/shared/src/lib/ || echo "No shared lib found"
          echo "üìä Initial migration status:"
          npx ts-node --project tsconfig.base.json --transpile-only scripts/migrate.ts status --verbose || exit 1
          echo "üöÄ Running pending migrations:"
          npx ts-node --project tsconfig.base.json --transpile-only scripts/migrate.ts run --verbose || exit 1
          echo "‚úÖ Migrations completed successfully"
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: homeaccounting_test
          DB_USERNAME: runner
          DB_PASSWORD: "testpass123"
          NODE_ENV: test

      # Verify migration status after running
      - name: Verify migration status
        run: |
          echo "üìä Checking final migration status..."
          npx ts-node --project tsconfig.base.json --transpile-only scripts/migrate.ts status
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: homeaccounting_test
          DB_USERNAME: runner
          DB_PASSWORD: "testpass123"
          NODE_ENV: test

      # Start backend for E2E tests
      - name: Start backend service
        run: |
          npx nx run backend:serve &
          sleep 10
          # Wait for backend to be ready with proper health check
          timeout 60 bash -c 'until curl -s http://localhost:3000/api/health > /dev/null; do echo "Waiting for backend..."; sleep 3; done'
          echo "‚úì Backend is ready"
        env:
          # Migration script format (DB_*)
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: homeaccounting_test
          DB_USERNAME: runner
          DB_PASSWORD: "testpass123"
          # Backend service format (DATABASE_*)
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_NAME: homeaccounting_test
          DATABASE_USER: runner
          DATABASE_PASSWORD: "testpass123"
          NODE_ENV: test

      # Seed test database using proper migration script
      - name: Seed test database
        run: |
          echo "üå± Running database seeds..."
          npx ts-node --project tsconfig.base.json --transpile-only scripts/migrate.ts seeds --verbose || exit 1
          echo "‚úÖ Test data seeded successfully"
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: homeaccounting_test
          DB_USERNAME: runner
          DB_PASSWORD: "testpass123"
          NODE_ENV: test

      # Start frontend for E2E tests  
      - name: Start frontend service
        run: |
          npx nx run frontend:serve &
          sleep 10
          # Wait for frontend to be ready
          timeout 60 bash -c 'until curl -s http://localhost:4200 > /dev/null; do echo "Waiting for frontend..."; sleep 3; done'
          echo "‚úì Frontend is ready"

      # Verify services before E2E tests
      - name: Verify services are ready
        run: |
          echo "üîç Checking backend health..."
          curl -f http://localhost:3000/api/health || exit 1
          echo "üîç Checking frontend availability..."
          curl -f http://localhost:4200 || exit 1
          echo "üîç Checking API endpoints..."
          curl -f http://localhost:4200/api/health || exit 1
          echo "‚úÖ All services are ready for E2E tests"

      # Install Playwright browsers
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      # Run E2E tests
      - name: Run E2E tests
        run: |
          echo "üß™ Running E2E tests against CI environment..."
          npx nx run frontend-e2e:e2e --verbose
        env:
          BASE_URL: http://localhost:4200
          CI: true
          DEBUG: pw:api

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            dist/
            playwright-report/
            test-results/
            frontend-e2e/test-results/
            frontend-e2e/playwright-report/
          retention-days: 30

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: |
            frontend-e2e/playwright-report/
            frontend-e2e/test-results/
          retention-days: 30

      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        if: github.event_name == 'push'
        with:
          directory: ./coverage
          fail_ci_if_error: false
